name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  id-token: write
  actions: read

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            name: edu-auth-linux-amd64
            docker: false
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            name: edu-auth-linux-arm64
            docker: true
          - os: macos-latest
            goos: darwin
            goarch: amd64
            name: edu-auth-macos-amd64
            docker: false
          - os: macos-latest
            goos: darwin
            goarch: arm64
            name: edu-auth-macos-arm64
            docker: false
          - os: windows-latest
            goos: windows
            goarch: amd64
            name: edu-auth-windows-amd64.exe
            docker: false
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      if: matrix.docker
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      if: matrix.docker
      uses: docker/setup-buildx-action@v3

    - name: Build with Docker (ARM64)
      if: matrix.docker
      run: |
        docker run --rm \
          --platform linux/arm64 \
          -v $PWD:/workspace \
          -w /workspace \
          golang:1.24-alpine \
          sh -c "
            apk add --no-cache gcc musl-dev pkgconfig
            go mod tidy
            go mod download
            CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -ldflags='-s -w' -o ${{ matrix.name }} ./main.go
          "

    - name: Set up Go (Non-Docker)
      if: "!matrix.docker"
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Install build dependencies (Linux)
      if: "!matrix.docker && matrix.goos == 'linux'"
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib

    - name: Build binary (Non-Docker)
      if: "!matrix.docker"
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 1
      run: |
        go mod tidy
        go mod download
        go build -ldflags="-s -w" -o ${{ matrix.name }} ./main.go

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}

  release:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./dist

    - name: Set variables
      id: vars
      run: |
        echo "short-sha=$(git rev-parse --short=7 HEAD)" >> $GITHUB_OUTPUT
        echo "commit-msg<<EOF" >> $GITHUB_OUTPUT
        git log -1 --pretty=%B >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        tag: "v0.0.0-${{ steps.vars.outputs.short-sha }}"
        name: "Edu-Auth-${{ steps.vars.outputs.short-sha }}"
        body: |
          ## 构建信息
          
          **Commit:** ${{ github.sha }}
          
          ## 更新日志
          
          ${{ steps.vars.outputs.commit-msg }}
          
          ## 支持的平台
          
          - Linux (amd64, arm64)
          - macOS (amd64, arm64)  
          - Windows (amd64)
        artifacts: |
          dist/edu-auth-*
        draft: false
        prerelease: false
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}